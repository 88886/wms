<?php

namespace Wms\Dao;

use Common\Common\BaseDao;
use Common\Common\BaseDaoInterface;

/**
 * 库存数据
 * Class GoodsDao
 * @package Wms\Dao
 */
class GoodsDao extends BaseDao implements BaseDaoInterface
{


    /**
     * GoodsDao constructor.
     */
    function __construct()
    {

    }

    /**
     * 添加数据[init,count,spucode]
     * @param $item
     * @return bool
     */
    public function insert($item)
    {
        $code = venus_unique_code("G");
        $data = array(
            "goods_code" => $code,
            "goods_init" => $item["init"],
            "goods_count" => $item["count"],
            "sku_init" => $item["skuinit"],
            "sku_count" => $item["skucount"],
            "sku_code" => $item["skucode"],
            "spu_code" => $item["spucode"],
            "sku_warning_1" => $item['firstwarning'], 
            "sku_warning_2" => $item['secondwarning'],
            "war_code" => $this->warehousecode,
        );
        return M("Goods")->add($data) ? $code : false;
    }

    /**
     * 查询
     * @param $code
     * @return mixed
     */
    public function queryByCode($code)
    {
        $condition = array("goods.war_code" => $this->warehousecode, "goods_code" => $code);
        return M("Goods")->alias('goods')->field('*,spu.spu_code,sku.sku_code')
            ->join("JOIN wms_spu spu ON spu.spu_code = goods.spu_code")
            ->join("JOIN wms_sku sku ON sku.sku_code = goods.sku_code")
            ->where($condition)->fetchSql(false)->find();
    }

    //查询

    /**
     * @param $cond
     * @param int $page
     * @param int $count
     * @return mixed
     */
    public function queryListByCondition($cond, $page = 0, $count = 100)
    {
        $condition = array("goods.war_code" => $this->warehousecode);

        if (isset($cond["seltype"]) && $cond["seltype"] == 3) {
            $condition["sku_count"] = array("EQ", 0);
        } else {
            $condition["sku_count"] = array("GT", 0);
        }
        $joinconds = array();
        if (isset($cond["%name%"])) {
            $spuname = preg_replace("/'/i", "", $cond["%name%"]);
            $joinconds[] = ("spu_name like '%{$spuname}%'");
        }
        if (isset($cond["type"])) {
            $joinconds[] = "spu_type = '" . $cond["type"] . "'";
        }
        if (isset($cond["subtype"])) {
            $joinconds[] = "spu_subtype = '" . $cond["subtype"] . "'";
        }
        $joinconds = empty($joinconds) ? "" : " AND " . implode(" AND ", $joinconds);
        return M("Goods")->alias('goods')->field('*,spu.spu_code,sku.sku_code')
            ->join("JOIN wms_spu spu ON spu.spu_code = goods.spu_code {$joinconds}")
            ->join("JOIN wms_sku sku ON sku.sku_code = goods.sku_code")
            ->where($condition)->order('goods.id desc')->limit("{$page},{$count}")->fetchSql(false)->select();
    }

    //总数

    /**
     * @param $cond
     * @return mixed
     */
    public function queryCountByCondition($cond)
    {
        $condition = array("goods.war_code" => $this->warehousecode);
        if (isset($cond["skucount"]) && $cond["skucount"] == 3) {
            $condition["sku_count"] = array("EQ", 0);
        } else {
            $condition["sku_count"] = array("GT", 0);
        }

        $joinconds = array();
        if (isset($cond["%name%"])) {
            $spuname = preg_replace("/'/i", "", $cond["%name%"]);
            $joinconds[] = ("spu_name like '%{$spuname}%'");
        }
        if (isset($cond["type"])) {
            $joinconds[] = "spu_type = '" . $cond["type"] . "'";
        }
        if (isset($cond["subtype"])) {
            $joinconds[] = "spu_subtype = '" . $cond["subtype"] . "'";
        }
        $joinconds = empty($joinconds) ? "" : " AND " . implode(" AND ", $joinconds);
        return M("Goods")->alias('goods')->field('*,spu.spu_code,sku.sku_code')
            ->join("JOIN wms_spu spu ON spu.spu_code = goods.spu_code {$joinconds}")
            ->join("JOIN wms_sku sku ON sku.sku_code = goods.sku_code")
            ->where($condition)->fetchSql(false)->count();
    }
    //查询

    /**
     * @param $cond
     * @param int $page
     * @param int $count
     * @return mixed
     */
    public function queryAllListByCondition($cond, $page = 0, $count = 100)
    {
        $condition = array("goods.war_code" => $this->warehousecode);
        $joinconds = array();
        if (isset($cond["%name%"])) {
            $spuname = preg_replace("/'/i", "", $cond["%name%"]);
            $joinconds[] = ("spu_name like '%{$spuname}%'");
        }
        if (isset($cond["type"])) {
            $joinconds[] = "spu_type = '" . $cond["type"] . "'";
        }
        if (isset($cond["subtype"])) {
            $joinconds[] = "spu_subtype = '" . $cond["subtype"] . "'";
        }
        $joinconds = empty($joinconds) ? "" : " AND " . implode(" AND ", $joinconds);
        return M("Goods")->alias('goods')->field('*,spu.spu_code,sku.sku_code')
            ->join("JOIN wms_spu spu ON spu.spu_code = goods.spu_code {$joinconds}")
            ->join("JOIN wms_sku sku ON sku.sku_code = goods.sku_code")
            ->join("JOIN wms_supplier sup ON sup.sup_code = spu.sup_code")
            ->where($condition)->order('goods.id desc')->limit("{$page},{$count}")
            ->fetchSql(false)->select();
    }


    public function queryAllCountByCondition($cond)
    {
        $condition = array("goods.war_code" => $this->warehousecode);
        $joinconds = array();
        if (isset($cond["%name%"])) {
            $spuname = preg_replace("/'/i", "", $cond["%name%"]);
            $joinconds[] = ("spu_name like '%{$spuname}%'");
        }
        if (isset($cond["type"])) {
            $joinconds[] = "spu_type = '" . $cond["type"] . "'";
        }
        if (isset($cond["subtype"])) {
            $joinconds[] = "spu_subtype = '" . $cond["subtype"] . "'";
        }
        $joinconds = empty($joinconds) ? "" : " AND " . implode(" AND ", $joinconds);
        return M("Goods")->alias('goods')->field('*,spu.spu_code,sku.sku_code')
            ->join("JOIN wms_spu spu ON spu.spu_code = goods.spu_code {$joinconds}")
            ->join("JOIN wms_sku sku ON sku.sku_code = goods.sku_code")
            ->where($condition)->fetchSql(false)->count();
    }

    /**
     * @param $code
     * @param $curcount
     * @param $newcount
     * @return mixed
     */
    public function updateCountByCode($code, $curcount, $newcount, $newskucount)
    {
        $condition = array("war_code" => $this->warehousecode, "goods_code" => $code, "goods_count" => $curcount);
        return M("Goods")->where($condition)
            ->save(array("timestamp" => venus_current_datetime(),
                "goods_count" => $newcount, "sku_count" => $newskucount));
    }

    //查询

    /**
     * @param $code
     * @return mixed
     */
    public function queryBySpuCode($code)
    {
        $condition = array("goods.war_code" => $this->warehousecode);
        $condition["goods.spu_code"] = $code;
        return M("Goods")->alias('goods')->field('*,spu.spu_code,sku.sku_code')
            ->join("JOIN wms_spu spu ON spu.spu_code = goods.spu_code")
            ->join("JOIN wms_sku sku ON sku.sku_code = goods.sku_code")
            ->where($condition)->fetchSql(false)->find();
    }

    /**
     * @param $code
     * @return mixed
     */
    public function queryBySkuCode($code)
    {
        $condition = array("goods.war_code" => $this->warehousecode);
        $condition["goods.sku_code"] = $code;
        return M("Goods")->alias('goods')->field('*,spu.spu_code,sku.sku_code')
            ->join("JOIN wms_spu spu ON spu.spu_code = goods.spu_code")
            ->join("JOIN wms_sku sku ON sku.sku_code = goods.sku_code")
            ->where($condition)->fetchSql(false)->find();
    }

    //根据goodscode修改库存

    /**
     * @param $code
     * @param $newinit
     * @param $newcount
     * @return mixed
     */
    public function updateCountAndInitByCode($code, $newinit, $newcount, $newskuinit, $newskucount)
    {
        $condition = array("war_code" => $this->warehousecode, "goods_code" => $code);
        return M("Goods")->where($condition)
            ->save(array("timestamp" => venus_current_datetime(),
                "goods_init" => $newinit, "goods_count" => $newcount, "sku_init" => $newskuinit, "sku_count" => $newskucount));
    }

    //直采退货专用
    public function updateInitByCode($code, $curinit, $newinit, $newskuinit)
    {
        $condition = array("war_code" => $this->warehousecode, "goods_code" => $code, "goods_init" => $curinit);
        return M("Goods")->where($condition)
            ->save(array("timestamp" => venus_current_datetime(), "sku_init" => $newskuinit,
                "goods_init" => $newinit));
    }
    //根据skucode 修改商品预警值
    public function updateWarningBySkuCode($skucode, $firstwarning, $secondwarning)
    {
        $condition['sku_code'] = $skucode;
        $data = array(
            'timestamp' => date("Y-m-d H:i:s"),
            'sku_warning_1' => $firstwarning,
            'sku_warning_2' => $secondwarning,
        );
        $data =  M("Goods")->where($condition)->save($data);
        return $data;
    }
    //
    public function goodsList(){
        return M("Goods")->alias('goods')->field('*,spu.spu_code,sku.sku_code')
            ->join("JOIN wms_spu spu ON spu.spu_code = goods.spu_code {$joinconds}")
            ->join("JOIN wms_sku sku ON sku.sku_code = goods.sku_code")
            ->join("JOIN wms_supplier sup ON sup.sup_code = spu.sup_code")
            ->where($condition)->order('goods.id desc')->limit(0,10000)
            ->fetchSql(false)->select();
    }

}